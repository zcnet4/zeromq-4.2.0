diff --git a/src/skynet/lualib-src/lsha1.c b/src/skynet/lualib-src/lsha1.c
index c421303..cc6546a 100644
--- a/src/skynet/lualib-src/lsha1.c
+++ b/src/skynet/lualib-src/lsha1.c
@@ -85,7 +85,7 @@ A million repetitions of "a"
 #include <stdio.h>
 #include <string.h>
 #include <stdint.h>
- 
+#include <unistd.h> 
 typedef struct {
 	uint32_t state[5];
 	uint32_t count[2];
diff --git a/src/skynet/lualib-src/lua-bson.c b/src/skynet/lualib-src/lua-bson.c
index 680a4f2..cae53bf 100644
--- a/src/skynet/lualib-src/lua-bson.c
+++ b/src/skynet/lualib-src/lua-bson.c
@@ -1201,7 +1201,7 @@ lobjectid(lua_State *L) {
 	} else {
 		time_t ti = time(NULL);
 		// old_counter is a static var, use atom inc.
-		uint32_t id = ATOM_FINC(&oid_counter);
+		uint32_t id = ATOM_FINC((int*)&oid_counter);
 
 		oid[2] = (ti>>24) & 0xff;
 		oid[3] = (ti>>16) & 0xff;
diff --git a/src/skynet/lualib-src/lua-crypt.c b/src/skynet/lualib-src/lua-crypt.c
index 400322a..19670e5 100644
--- a/src/skynet/lualib-src/lua-crypt.c
+++ b/src/skynet/lualib-src/lua-crypt.c
@@ -400,7 +400,7 @@ ldesdecode(lua_State *L) {
 	uint32_t ESK[32];
 	des_key(L, ESK);
 	uint32_t SK[32];
-	int i;
+  size_t i;
 	for( i = 0; i < 32; i += 2 ) {
 		SK[i] = ESK[30 - i];
 		SK[i + 1] = ESK[31 - i];
@@ -479,7 +479,7 @@ ltohex(lua_State *L) {
 	if (sz > SMALL_CHUNK/2) {
 		buffer = lua_newuserdata(L, sz * 2);
 	}
-	int i;
+  size_t i;
 	for (i=0;i<sz;i++) {
 		buffer[i*2] = hex[text[i] >> 4];
 		buffer[i*2+1] = hex[text[i] & 0xf];
@@ -502,7 +502,7 @@ lfromhex(lua_State *L) {
 	if (sz > SMALL_CHUNK*2) {
 		buffer = lua_newuserdata(L, sz / 2);
 	}
-	int i;
+  size_t i;
 	for (i=0;i<sz;i+=2) {
 		uint8_t hi,low;
 		HEX(hi, text[i]);
@@ -824,7 +824,7 @@ lb64decode(lua_State *L) {
 	if (decode_sz > SMALL_CHUNK) {
 		buffer = lua_newuserdata(L, decode_sz);
 	}
-	int i,j;
+  size_t i, j;
 	int output = 0;
 	for (i=0;i<sz;) {
 		int padding = 0;
@@ -888,7 +888,7 @@ lxor_str(lua_State *L) {
 	}
 	luaL_Buffer b;
 	char * buffer = luaL_buffinitsize(L, &b, len1);
-	int i;
+  size_t i;
 	for (i=0;i<len1;i++) {
 		buffer[i] = s1[i] ^ s2[i % len2];
 	}
@@ -900,6 +900,78 @@ lxor_str(lua_State *L) {
 // defined in lsha1.c
 int lsha1(lua_State *L);
 int lhmac_sha1(lua_State *L);
+// sha256
+#include "sha256.h"
+#define SHA256_DIGEST_SIZE 32
+
+int lsha256(lua_State* L) {
+  size_t sz = 0;
+  const uint8_t * buffer = (const uint8_t *)luaL_checklstring(L, 1, &sz);
+  //
+  uint8_t digest[SHA256_DIGEST_SIZE];
+  //
+  sha256_context ctx;
+  sha256_init(&ctx);
+  sha256_hash(&ctx, buffer, sz);
+  sha256_done(&ctx, digest);
+  //
+  lua_pushlstring(L, (const char *)digest, SHA256_DIGEST_SIZE);
+  //
+  return 1;
+}
+
+#define BLOCKSIZE 64
+static inline void
+_xor_key(uint8_t key[BLOCKSIZE], uint32_t xor) {
+  int i;
+  for (i = 0; i < BLOCKSIZE; i += sizeof(uint32_t)) {
+    uint32_t * k = (uint32_t *)&key[i];
+    *k ^= xor;
+  }
+}
+
+int lhmac_sha256(lua_State *L) {
+  // 第一个参数是key，第二个参数是内容。
+  size_t key_sz = 0;
+  const uint8_t * key = (const uint8_t *)luaL_checklstring(L, 1, &key_sz);
+  size_t text_sz = 0;
+  const uint8_t * text = (const uint8_t *)luaL_checklstring(L, 2, &text_sz);
+  //
+  sha256_context ctx1, ctx2;
+  uint8_t digest1[SHA256_DIGEST_SIZE];
+  uint8_t digest2[SHA256_DIGEST_SIZE];
+  //
+  uint8_t rkey[BLOCKSIZE];
+  memset(rkey, 0, BLOCKSIZE);
+  // normalize_key
+  if (key_sz > BLOCKSIZE) {
+    sha256_context ctx;
+    sha256_init(&ctx);
+    sha256_hash(&ctx, key, key_sz);
+    sha256_done(&ctx, rkey);
+    key_sz = SHA256_DIGEST_SIZE;
+  } else {
+    memcpy(rkey, key, key_sz);
+  }
+
+  _xor_key(rkey, 0x5c5c5c5c);
+  sha256_init(&ctx1);
+  sha256_hash(&ctx1, rkey, BLOCKSIZE);
+
+  _xor_key(rkey, 0x5c5c5c5c ^ 0x36363636);
+  sha256_init(&ctx2);
+  sha256_hash(&ctx2, rkey, BLOCKSIZE);
+  sha256_hash(&ctx2, text, text_sz);
+  sha256_done(&ctx2, digest2);
+
+  sha256_hash(&ctx1, digest2, SHA256_DIGEST_SIZE);
+  sha256_done(&ctx1, digest1);
+
+  lua_pushlstring(L, (const char *)digest1, SHA256_DIGEST_SIZE);
+
+  return 1;
+}
+
 
 int
 luaopen_crypt(lua_State *L) {
@@ -923,7 +995,9 @@ luaopen_crypt(lua_State *L) {
 		{ "base64encode", lb64encode },
 		{ "base64decode", lb64decode },
 		{ "sha1", lsha1 },
+    { "sha256", lsha256 },
 		{ "hmac_sha1", lhmac_sha1 },
+    { "hmac_sha256", lhmac_sha256 },
 		{ "hmac_hash", lhmac_hash },
 		{ "xor_str", lxor_str },
 		{ NULL, NULL },
diff --git a/src/skynet/lualib-src/lua-multicast.c b/src/skynet/lualib-src/lua-multicast.c
index 841267a..370efba 100644
--- a/src/skynet/lualib-src/lua-multicast.c
+++ b/src/skynet/lualib-src/lua-multicast.c
@@ -3,6 +3,7 @@
 #include <lua.h>
 #include <lauxlib.h>
 #include <stdint.h>
+#include <stdlib.h>
 #include <string.h>
 
 #include "atomic.h"
diff --git a/src/skynet/lualib-src/lua-netpack.c b/src/skynet/lualib-src/lua-netpack.c
index 5fae040..069e9e6 100644
--- a/src/skynet/lualib-src/lua-netpack.c
+++ b/src/skynet/lualib-src/lua-netpack.c
@@ -241,14 +241,14 @@ filter_data_(lua_State *L, int fd, uint8_t * buffer, int size) {
 		}
 		int need = uc->pack.size - uc->read;
 		if (size < need) {
-			memcpy(uc->pack.buffer + uc->read, buffer, size);
+      memcpy((uint8_t*)uc->pack.buffer + uc->read, buffer, size);
 			uc->read += size;
 			int h = hash_fd(fd);
 			uc->next = q->hash[h];
 			q->hash[h] = uc;
 			return 1;
 		}
-		memcpy(uc->pack.buffer + uc->read, buffer, need);
+    memcpy((uint8_t*)uc->pack.buffer + uc->read, buffer, need);
 		buffer += need;
 		size -= need;
 		if (size == 0) {
diff --git a/src/skynet/lualib-src/lua-seri.c b/src/skynet/lualib-src/lua-seri.c
index 28056f7..3767d8f 100644
--- a/src/skynet/lualib-src/lua-seri.c
+++ b/src/skynet/lualib-src/lua-seri.c
@@ -608,3 +608,62 @@ luaseri_pack(lua_State *L) {
 
 	return 2;
 }
+
+
+char* _luaseri_pack_impl(lua_State* L, int from, int to, int* buf_size) {
+	struct block temp;
+	temp.next = NULL;
+	struct write_block wb;
+	wb_init(&wb, &temp);
+	//
+	int n = to - from;
+	int i;
+	for (i = 1; i <= n; i++) {
+		pack_one(L, &wb, from + i, 0);
+	}
+	//
+	assert(wb.head == &temp);
+  //[len][cmd][session][uid][content]:包长度+命令+会话+uid+内容。
+  int _buf_size = sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + sizeof(uint32_t) + wb.len;
+  char* buf = skynet_malloc(_buf_size);
+  //
+  char* ptr = buf + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + sizeof(uint32_t);
+  int sz = wb.len;
+  struct block* b = &temp;
+	while (sz > 0) {
+		if (sz >= BLOCK_SIZE) {
+	      memcpy(ptr, b->buffer, BLOCK_SIZE);
+	      ptr += BLOCK_SIZE;
+	      sz -= BLOCK_SIZE;
+	      b = b->next;
+	    } else {
+	      memcpy(ptr, b->buffer, sz);
+	      break;
+	    }
+	}
+	wb_free(&wb);
+	//
+  *buf_size = _buf_size;
+  return buf;
+}
+
+void _luaseri_unpack_impl(lua_State* L, const char* buf, int buf_size) {
+	struct read_block rb;
+	rball_init(&rb, (char*)buf, buf_size);
+
+	int i;
+	for (i=0;;i++) {
+		if (i%8==7) {
+			luaL_checkstack(L,LUA_MINSTACK,NULL);
+		}
+		uint8_t type = 0;
+		uint8_t *t = rb_read(&rb, sizeof(type));
+		if (t==NULL)
+			break;
+		type = *t;
+		push_value(L, &rb, type & 0x7, type>>3);
+	}
+
+	// Need not free buffer
+  //return lua_gettop(L) - 1;
+}
\ No newline at end of file
diff --git a/src/skynet/lualib-src/lua-seri.h b/src/skynet/lualib-src/lua-seri.h
index 6102239..d3489fc 100644
--- a/src/skynet/lualib-src/lua-seri.h
+++ b/src/skynet/lualib-src/lua-seri.h
@@ -1,9 +1,20 @@
 #ifndef LUA_SERIALIZE_H
 #define LUA_SERIALIZE_H
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #include <lua.h>
 
 int luaseri_pack(lua_State *L);
 int luaseri_unpack(lua_State *L);
 
+char* _luaseri_pack_impl(lua_State* L, int from, int to, int* buf_size);
+void _luaseri_unpack_impl(lua_State* L, const char* buf, int buf_size);
+
+#ifdef __cplusplus
+}
+#endif
+
 #endif
diff --git a/src/skynet/lualib-src/lua-skynet.c b/src/skynet/lualib-src/lua-skynet.c
index ee7bd89..14a141f 100644
--- a/src/skynet/lualib-src/lua-skynet.c
+++ b/src/skynet/lualib-src/lua-skynet.c
@@ -366,6 +366,7 @@ lnow(lua_State *L) {
 	return 1;
 }
 
+#include "skynet_proto.h"
 int
 luaopen_skynet_core(lua_State *L) {
 	luaL_checkversion(L);
@@ -382,6 +383,10 @@ luaopen_skynet_core(lua_State *L) {
 		{ "pack", luaseri_pack },
 		{ "unpack", luaseri_unpack },
 		{ "packstring", lpackstring },
+    { "proto_pack", skynet_proto_pack },
+    { "proto_pack2", skynet_proto_pack2 },
+    { "proto_unpack", skynet_proto_unpack },
+    { "proto_unpack2", skynet_proto_unpack2 },
 		{ "trash" , ltrash },
 		{ "callback", lcallback },
 		{ "now", lnow },
diff --git a/src/skynet/lualib-src/lua-socket.c b/src/skynet/lualib-src/lua-socket.c
index ecaa2fc..202c168 100644
--- a/src/skynet/lualib-src/lua-socket.c
+++ b/src/skynet/lualib-src/lua-socket.c
@@ -440,7 +440,12 @@ static int
 lconnect(lua_State *L) {
 	size_t sz = 0;
 	const char * addr = luaL_checklstring(L,1,&sz);
+#ifdef _MSC_VER
+	assert(sz <= 1024);
+	char tmp[1024];
+#else
 	char tmp[sz];
+#endif
 	int port = 0;
 	const char * host = address_port(L, tmp, addr, 2, &port);
 	if (port == 0) {
@@ -599,7 +604,12 @@ ludp(lua_State *L) {
 	struct skynet_context * ctx = lua_touserdata(L, lua_upvalueindex(1));
 	size_t sz = 0;
 	const char * addr = lua_tolstring(L,1,&sz);
+#ifdef _MSC_VER
+	assert(sz <= 1024);
+	char tmp[1024];
+#else
 	char tmp[sz];
+#endif
 	int port = 0;
 	const char * host = NULL;
 	if (addr) {
@@ -620,7 +630,12 @@ ludp_connect(lua_State *L) {
 	int id = luaL_checkinteger(L, 1);
 	size_t sz = 0;
 	const char * addr = luaL_checklstring(L,2,&sz);
+#ifdef _MSC_VER
+	assert(sz <= 1024);
+	char tmp[1024];
+#else
 	char tmp[sz];
+#endif
 	int port = 0;
 	const char * host = NULL;
 	if (addr) {
diff --git a/src/skynet/lualib-src/lualib-src.patch b/src/skynet/lualib-src/lualib-src.patch
index b027da6..beb83e4 100644
--- a/src/skynet/lualib-src/lualib-src.patch
+++ b/src/skynet/lualib-src/lualib-src.patch
@@ -1,358 +0,0 @@
-Index: lsha1.c
-===================================================================
---- lsha1.c	(revision 16373)
-+++ lsha1.c	(working copy)
-@@ -85,7 +85,7 @@
- #include <stdio.h>
- #include <string.h>
- #include <stdint.h>
-- 
-+#include <unistd.h> 
- typedef struct {
- 	uint32_t state[5];
- 	uint32_t count[2];
-Index: lua-bson.c
-===================================================================
---- lua-bson.c	(revision 16373)
-+++ lua-bson.c	(working copy)
-@@ -1201,7 +1201,7 @@
- 	} else {
- 		time_t ti = time(NULL);
- 		// old_counter is a static var, use atom inc.
--		uint32_t id = ATOM_FINC(&oid_counter);
-+		uint32_t id = ATOM_FINC((int*)&oid_counter);
- 
- 		oid[2] = (ti>>24) & 0xff;
- 		oid[3] = (ti>>16) & 0xff;
-Index: lua-crypt.c
-===================================================================
---- lua-crypt.c	(revision 16373)
-+++ lua-crypt.c	(working copy)
-@@ -400,7 +400,7 @@
- 	uint32_t ESK[32];
- 	des_key(L, ESK);
- 	uint32_t SK[32];
--	int i;
-+  size_t i;
- 	for( i = 0; i < 32; i += 2 ) {
- 		SK[i] = ESK[30 - i];
- 		SK[i + 1] = ESK[31 - i];
-@@ -479,7 +479,7 @@
- 	if (sz > SMALL_CHUNK/2) {
- 		buffer = lua_newuserdata(L, sz * 2);
- 	}
--	int i;
-+  size_t i;
- 	for (i=0;i<sz;i++) {
- 		buffer[i*2] = hex[text[i] >> 4];
- 		buffer[i*2+1] = hex[text[i] & 0xf];
-@@ -502,7 +502,7 @@
- 	if (sz > SMALL_CHUNK*2) {
- 		buffer = lua_newuserdata(L, sz / 2);
- 	}
--	int i;
-+  size_t i;
- 	for (i=0;i<sz;i+=2) {
- 		uint8_t hi,low;
- 		HEX(hi, text[i]);
-@@ -824,7 +824,7 @@
- 	if (decode_sz > SMALL_CHUNK) {
- 		buffer = lua_newuserdata(L, decode_sz);
- 	}
--	int i,j;
-+  size_t i, j;
- 	int output = 0;
- 	for (i=0;i<sz;) {
- 		int padding = 0;
-@@ -888,7 +888,7 @@
- 	}
- 	luaL_Buffer b;
- 	char * buffer = luaL_buffinitsize(L, &b, len1);
--	int i;
-+  size_t i;
- 	for (i=0;i<len1;i++) {
- 		buffer[i] = s1[i] ^ s2[i % len2];
- 	}
-@@ -900,7 +900,79 @@
- // defined in lsha1.c
- int lsha1(lua_State *L);
- int lhmac_sha1(lua_State *L);
-+// sha256
-+#include "sha256.h"
-+#define SHA256_DIGEST_SIZE 32
- 
-+int lsha256(lua_State* L) {
-+  size_t sz = 0;
-+  const uint8_t * buffer = (const uint8_t *)luaL_checklstring(L, 1, &sz);
-+  //
-+  uint8_t digest[SHA256_DIGEST_SIZE];
-+  //
-+  sha256_context ctx;
-+  sha256_init(&ctx);
-+  sha256_hash(&ctx, buffer, sz);
-+  sha256_done(&ctx, digest);
-+  //
-+  lua_pushlstring(L, (const char *)digest, SHA256_DIGEST_SIZE);
-+  //
-+  return 1;
-+}
-+
-+#define BLOCKSIZE 64
-+static inline void
-+_xor_key(uint8_t key[BLOCKSIZE], uint32_t xor) {
-+  int i;
-+  for (i = 0; i < BLOCKSIZE; i += sizeof(uint32_t)) {
-+    uint32_t * k = (uint32_t *)&key[i];
-+    *k ^= xor;
-+  }
-+}
-+
-+int lhmac_sha256(lua_State *L) {
-+  // 第一个参数是key，第二个参数是内容。
-+  size_t key_sz = 0;
-+  const uint8_t * key = (const uint8_t *)luaL_checklstring(L, 1, &key_sz);
-+  size_t text_sz = 0;
-+  const uint8_t * text = (const uint8_t *)luaL_checklstring(L, 2, &text_sz);
-+  //
-+  sha256_context ctx1, ctx2;
-+  uint8_t digest1[SHA256_DIGEST_SIZE];
-+  uint8_t digest2[SHA256_DIGEST_SIZE];
-+  //
-+  uint8_t rkey[BLOCKSIZE];
-+  memset(rkey, 0, BLOCKSIZE);
-+  // normalize_key
-+  if (key_sz > BLOCKSIZE) {
-+    sha256_context ctx;
-+    sha256_init(&ctx);
-+    sha256_hash(&ctx, key, key_sz);
-+    sha256_done(&ctx, rkey);
-+    key_sz = SHA256_DIGEST_SIZE;
-+  } else {
-+    memcpy(rkey, key, key_sz);
-+  }
-+
-+  _xor_key(rkey, 0x5c5c5c5c);
-+  sha256_init(&ctx1);
-+  sha256_hash(&ctx1, rkey, BLOCKSIZE);
-+
-+  _xor_key(rkey, 0x5c5c5c5c ^ 0x36363636);
-+  sha256_init(&ctx2);
-+  sha256_hash(&ctx2, rkey, BLOCKSIZE);
-+  sha256_hash(&ctx2, text, text_sz);
-+  sha256_done(&ctx2, digest2);
-+
-+  sha256_hash(&ctx1, digest2, SHA256_DIGEST_SIZE);
-+  sha256_done(&ctx1, digest1);
-+
-+  lua_pushlstring(L, (const char *)digest1, SHA256_DIGEST_SIZE);
-+
-+  return 1;
-+}
-+
-+
- int
- luaopen_crypt(lua_State *L) {
- 	luaL_checkversion(L);
-@@ -923,7 +995,9 @@
- 		{ "base64encode", lb64encode },
- 		{ "base64decode", lb64decode },
- 		{ "sha1", lsha1 },
-+    { "sha256", lsha256 },
- 		{ "hmac_sha1", lhmac_sha1 },
-+    { "hmac_sha256", lhmac_sha256 },
- 		{ "hmac_hash", lhmac_hash },
- 		{ "xor_str", lxor_str },
- 		{ NULL, NULL },
-Index: lua-multicast.c
-===================================================================
---- lua-multicast.c	(revision 16373)
-+++ lua-multicast.c	(working copy)
-@@ -3,6 +3,7 @@
- #include <lua.h>
- #include <lauxlib.h>
- #include <stdint.h>
-+#include <stdlib.h>
- #include <string.h>
- 
- #include "atomic.h"
-Index: lua-netpack.c
-===================================================================
---- lua-netpack.c	(revision 16373)
-+++ lua-netpack.c	(working copy)
-@@ -241,7 +241,7 @@
- 		}
- 		int need = uc->pack.size - uc->read;
- 		if (size < need) {
--			memcpy(uc->pack.buffer + uc->read, buffer, size);
-+      memcpy((uint8_t*)uc->pack.buffer + uc->read, buffer, size);
- 			uc->read += size;
- 			int h = hash_fd(fd);
- 			uc->next = q->hash[h];
-@@ -248,7 +248,7 @@
- 			q->hash[h] = uc;
- 			return 1;
- 		}
--		memcpy(uc->pack.buffer + uc->read, buffer, need);
-+    memcpy((uint8_t*)uc->pack.buffer + uc->read, buffer, need);
- 		buffer += need;
- 		size -= need;
- 		if (size == 0) {
-Index: lua-seri.c
-===================================================================
---- lua-seri.c	(revision 16373)
-+++ lua-seri.c	(working copy)
-@@ -608,3 +608,62 @@
- 
- 	return 2;
- }
-+
-+
-+char* _luaseri_pack_impl(lua_State* L, int from, int to, int* buf_size) {
-+	struct block temp;
-+	temp.next = NULL;
-+	struct write_block wb;
-+	wb_init(&wb, &temp);
-+	//
-+	int n = to - from;
-+	int i;
-+	for (i = 1; i <= n; i++) {
-+		pack_one(L, &wb, from + i, 0);
-+	}
-+	//
-+	assert(wb.head == &temp);
-+  //[len][cmd][session][content]:包长度+命令+会话+内容。
-+  int _buf_size = sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + wb.len;
-+  char* buf = skynet_malloc(_buf_size);
-+  //
-+  char* ptr = buf + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t);
-+  int sz = wb.len;
-+  struct block* b = &temp;
-+	while (sz > 0) {
-+		if (sz >= BLOCK_SIZE) {
-+	      memcpy(ptr, b->buffer, BLOCK_SIZE);
-+	      ptr += BLOCK_SIZE;
-+	      sz -= BLOCK_SIZE;
-+	      b = b->next;
-+	    } else {
-+	      memcpy(ptr, b->buffer, sz);
-+	      break;
-+	    }
-+	}
-+	wb_free(&wb);
-+	//
-+  *buf_size = _buf_size;
-+  return buf;
-+}
-+
-+void _luaseri_unpack_impl(lua_State* L, const char* buf, int buf_size) {
-+	struct read_block rb;
-+	rball_init(&rb, (char*)buf, buf_size);
-+
-+	int i;
-+	for (i=0;;i++) {
-+		if (i%8==7) {
-+			luaL_checkstack(L,LUA_MINSTACK,NULL);
-+		}
-+		uint8_t type = 0;
-+		uint8_t *t = rb_read(&rb, sizeof(type));
-+		if (t==NULL)
-+			break;
-+		type = *t;
-+		push_value(L, &rb, type & 0x7, type>>3);
-+	}
-+
-+	// Need not free buffer
-+  //return lua_gettop(L) - 1;
-+}
-\ No newline at end of file
-Index: lua-seri.h
-===================================================================
---- lua-seri.h	(revision 16373)
-+++ lua-seri.h	(working copy)
-@@ -1,9 +1,20 @@
- #ifndef LUA_SERIALIZE_H
- #define LUA_SERIALIZE_H
- 
-+#ifdef __cplusplus
-+extern "C" {
-+#endif
-+
- #include <lua.h>
- 
- int luaseri_pack(lua_State *L);
- int luaseri_unpack(lua_State *L);
- 
-+char* _luaseri_pack_impl(lua_State* L, int from, int to, int* buf_size);
-+void _luaseri_unpack_impl(lua_State* L, const char* buf, int buf_size);
-+
-+#ifdef __cplusplus
-+}
- #endif
-+
-+#endif
-Index: lua-skynet.c
-===================================================================
---- lua-skynet.c	(revision 16373)
-+++ lua-skynet.c	(working copy)
-@@ -351,6 +351,7 @@
- 	return 1;
- }
- 
-+#include "skynet_proto.h"
- int
- luaopen_skynet_core(lua_State *L) {
- 	luaL_checkversion(L);
-@@ -367,6 +368,10 @@
- 		{ "pack", luaseri_pack },
- 		{ "unpack", luaseri_unpack },
- 		{ "packstring", lpackstring },
-+    { "proto_pack", _skynet_proto_pack },
-+    { "proto_unpack", _skynet_proto_unpack },
-+    { "proto_tochat", _skynet_proto_tochat },
-+    { "proto_auth", _skynet_proto_auth },
- 		{ "trash" , ltrash },
- 		{ "callback", lcallback },
- 		{ "now", lnow },
-Index: lua-socket.c
-===================================================================
---- lua-socket.c	(revision 16373)
-+++ lua-socket.c	(working copy)
-@@ -440,7 +440,12 @@
- lconnect(lua_State *L) {
- 	size_t sz = 0;
- 	const char * addr = luaL_checklstring(L,1,&sz);
-+#ifdef _MSC_VER
-+	assert(sz <= 1024);
-+	char tmp[1024];
-+#else
- 	char tmp[sz];
-+#endif
- 	int port = 0;
- 	const char * host = address_port(L, tmp, addr, 2, &port);
- 	if (port == 0) {
-@@ -599,7 +604,12 @@
- 	struct skynet_context * ctx = lua_touserdata(L, lua_upvalueindex(1));
- 	size_t sz = 0;
- 	const char * addr = lua_tolstring(L,1,&sz);
-+#ifdef _MSC_VER
-+	assert(sz <= 1024);
-+	char tmp[1024];
-+#else
- 	char tmp[sz];
-+#endif
- 	int port = 0;
- 	const char * host = NULL;
- 	if (addr) {
-@@ -620,7 +630,12 @@
- 	int id = luaL_checkinteger(L, 1);
- 	size_t sz = 0;
- 	const char * addr = luaL_checklstring(L,2,&sz);
-+#ifdef _MSC_VER
-+	assert(sz <= 1024);
-+	char tmp[1024];
-+#else
- 	char tmp[sz];
-+#endif
- 	int port = 0;
- 	const char * host = NULL;
- 	if (addr) {
diff --git a/src/skynet/lualib-src/sproto/lsproto.c b/src/skynet/lualib-src/sproto/lsproto.c
index c7708fe..49f2013 100644
--- a/src/skynet/lualib-src/sproto/lsproto.c
+++ b/src/skynet/lualib-src/sproto/lsproto.c
@@ -202,7 +202,7 @@ encode(const struct sproto_arg *args) {
 		} else {
 			str = lua_tolstring(L, -1, &sz);
 		}
-		if (sz > args->length)
+		if ((int)sz > args->length)
 			return SPROTO_CB_ERROR;
 		memcpy(args->value, str, sz);
 		lua_pop(L,1);
@@ -482,11 +482,11 @@ lpack(lua_State *L) {
 	void * output = lua_touserdata(L, lua_upvalueindex(1));
 	int bytes;
 	int osz = lua_tointeger(L, lua_upvalueindex(2));
-	if (osz < maxsz) {
+	if (osz < (int)maxsz) {
 		output = expand_buffer(L, osz, maxsz);
 	}
 	bytes = sproto_pack(buffer, sz, output, maxsz);
-	if (bytes > maxsz) {
+  if (bytes >(int)maxsz) {
 		return luaL_error(L, "packing error, return size = %d", bytes);
 	}
 	lua_pushlstring(L, output, bytes);
diff --git a/src/skynet/lualib-src/sproto/sproto.c b/src/skynet/lualib-src/sproto/sproto.c
index 9b23af4..33b7ac1 100644
--- a/src/skynet/lualib-src/sproto/sproto.c
+++ b/src/skynet/lualib-src/sproto/sproto.c
@@ -41,7 +41,7 @@ struct chunk {
 struct pool {
 	struct chunk * header;
 	struct chunk * current;
-	int current_used;
+  size_t current_used;
 };
 
 struct sproto {
@@ -141,7 +141,7 @@ count_array(const uint8_t * stream) {
 static int
 struct_field(const uint8_t * stream, size_t sz) {
 	const uint8_t * field;
-	int fn, header, i;
+	size_t fn, header, i;
 	if (sz < SIZEOF_LENGTH)
 		return -1;
 	fn = toword(stream);
@@ -966,7 +966,7 @@ sproto_encode(const struct sproto_type *st, void * buffer, int size, sproto_call
 }
 
 static int
-decode_array_object(sproto_callback cb, struct sproto_arg *args, uint8_t * stream, int sz) {
+decode_array_object(sproto_callback cb, struct sproto_arg *args, uint8_t * stream, size_t sz) {
 	uint32_t hsz;
 	int index = 1;
 	while (sz > 0) {
@@ -1002,7 +1002,7 @@ static int
 decode_array(sproto_callback cb, struct sproto_arg *args, uint8_t * stream) {
 	uint32_t sz = todword(stream);
 	int type = args->type;
-	int i;
+	size_t i;
 	if (sz == 0) {
 		// It's empty array, call cb with index == -1 to create the empty array.
 		args->index = -1;
@@ -1102,7 +1102,7 @@ sproto_decode(const struct sproto_type *st, const void * data, int size, sproto_
 			if (size < SIZEOF_LENGTH)
 				return -1;
 			sz = todword(datastream);
-			if (size < sz + SIZEOF_LENGTH)
+			if (size < (int)sz + SIZEOF_LENGTH)
 				return -1;
 			datastream += sz+SIZEOF_LENGTH;
 			size -= sz+SIZEOF_LENGTH;
